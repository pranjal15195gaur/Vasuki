---
title: "Vasuki Advanced Documentation"
format: html
css: assets/custom.css
---

<div style="position: fixed; left: 0; top: 0; width: 200px; height: 100%; background-color: #f4f4f4; padding: 10px; overflow-y: auto; border-right: 1px solid #ddd;">
  <h3>Navigation</h3>
  <ul style="list-style-type: none; padding: 0;">
    <li><a href="https://github.com/YourUser/VasukiDocs/edit/main/advanced.qmd" target="_blank">Edit on GitHub</a></li>
    <li><a href="#overview">Overview</a></li>
    <li><a href="#syntax-structure-overview">Syntax Structure Overview</a></li>
    <li><a href="#lexical-analysis-lexer">Lexical Analysis (Lexer)</a></li>
    <li><a href="#parsing-and-ast">Parsing and AST</a></li>
    <li><a href="#interpreter-and-environment">Interpreter and Environment</a></li>
    <li><a href="#advanced-constructs">Advanced Constructs</a></li>
    <li><a href="#special-language-features">Special Language Features</a></li>
    <li><a href="#error-handling-and-debugging">Error Handling and Debugging</a></li>
    <li><a href="#example-program-walkthrough">Example Program Walkthrough</a></li>
    <li><a href="#appendix-extended-explanations-and-examples">Appendix: Extended Explanations and Examples</a></li>
  </ul>
</div>


 
---

Welcome to the advanced documentation for Vasuki. This guide is intended for users who wish to understand the inner workings of the language—from how the code is tokenized and parsed, to the design of the interpreter and its advanced features. Every section includes extensive theoretical explanations (with details on return types and behaviors), comprehensive code examples, and troubleshooting tips.

---

## **Overview**

Vasuki is a lightweight scripting language that combines simplicity with powerful features. Key aspects include:  

- **Dual Scoping Mechanisms**:  
  Supports both static and dynamic scoping, allowing variables to be resolved based on both their declaration site and the calling context.
- **Implicit Returns**:  
  Lines written without a semicolon are treated as having an implicit `return` at the end.
- **Control Structures with Return Values**:  
  If, for, and while constructs return the value of their executed block.
- **Modular Architecture**:  
  Comprised of a lexer, parser, AST builder, and interpreter.

---

## **Syntax Structure Overview**

Vasuki’s syntax is minimal yet expressive. Its key elements include:

- **Statements**:  
  Each statement typically ends with a semicolon (`;`). Omission of a semicolon causes an implicit return of that expression.
- **Blocks**:  
  Groups of statements enclosed in `{ }` for control structures.
- **Expressions**:  
  Every expression has a type (e.g., integer, float, boolean) and returns a value upon evaluation.

### **Detailed Syntax**

- **Variable Declaration**:  
  ```bash
  var x = 10;
  ```
  Explanation: Declares variable x with an integer value 10. Returns 10.

- **Assignment**:  
  ```bash
  x = x + 5;
  ```
  Explanation: Updates x to 15. Returns 15.


---

## **Lexical Analysis (Lexer)**

The lexer is responsible for tokenizing the input source code.

### **Token Types**

IntToken & FloatToken:
Represent numeric literals.
Syntax Example:

```bash
IntToken("123");
```

```bash
FloatToken("3.14");
```



OperatorToken:
Represents operators such as +, -, *, /, %, **, <, <=, etc.
Example:

```bash
OperatorToken('+');
```

KeywordToken:
For reserved words like if, else, var, for, while, and def.
(…extended explanation on keyword versus identifier differentiation…)

ParenToken:
Represents parentheses used for grouping.
(…complete discussion on handling nested parentheses…)

### **Lexer Process**


---

## **Parsing and AST**

The parser constructs an Abstract Syntax Tree (AST) from the token stream.

### **AST Nodes and Their Syntax**

Binary Operations (BinOp):

```bash
BinOp('+', Int(10), Int(5));
```
Explanation: Represents the addition of 10 and 5, returning 15.

Unary Operations (UnOp):

```bash
UnOp('-', Int(5));
```

Numeric Literals (Int, Float):
(…complete details on how literals are stored, type conversion, etc.)

Conditional Statements (If):

```bash
If(BinOp('<', VarReference("x"), Int(20)), Print("x is less than 20"), [], Print("x is 20 or greater"));
```
Explanation: Represents conditional branching logic.

Loops (For, While):
Detailed syntax for both for and while loops with explanations on initialization, condition, increment, and block evaluation. (…multiple examples provided…)

Function Definitions and Calls:

```bash
FunctionDef(name, parameters, body);
FunctionCall(name, arguments);
```


### **Parsing Process**


---

## **Interpreter and Environment**

The interpreter evaluates the AST within an environment that supports variable scoping and function closures.

### **Environment Model**

Static Scoping:
Variables are resolved based on the environment where they were declared.

Dynamic Scoping:
Variables are resolved based on the calling context if not found in the static environment.

### **Evaluation Process**

(…Step-by-step walkthrough of the interpreter’s evaluation process for each AST node type. Detailed examples show how a BinOp node is evaluated, how control structures return values, and how implicit returns are handled.)

---

## **Advanced Constructs**

Vasuki includes several advanced programming features:

Functions
Syntax:

```bash
def functionName(param1, param2) {
    // function body
    return expression;
}
```

Arrays
Syntax:

```bash
var arr = [1, 2, 3];
print(arr[2]);  // One-based indexing: returns 2
```

Labels and Custom Flow Control
Syntax:

```bash
labelName:
    // code block
goandreturn labelName;
```

---

## **Special Language Features**

Vasuki offers several unique features that set it apart from other scripting languages. These features enhance flexibility, readability, and debugging capabilities.

### **Dual Scoping Mechanisms**

- **Static Scoping**:  
  Variables are resolved based on their declaration location in the code. This ensures predictable behavior, as the variable's value is determined by the structure of the program.

- **Dynamic Scoping**:  
  Variables are resolved in the context of the caller's environment if they are not found in the static scope. This provides additional flexibility, especially in scenarios involving closures or nested function calls.

**Detailed Explanation**:  
Static scoping ensures that variables are bound to their declaration context, making the code easier to debug and understand. Dynamic scoping, on the other hand, allows for more dynamic behavior, enabling variables to adapt to the calling context.  
*Examples and diagrams illustrating both scoping mechanisms are provided in the appendix.*

---

### **Control Structures with Return Values**

- **Behavior**:  
  Control structures such as `if`, `for`, and `while` return the value of the last executed statement within their block. This allows these constructs to be used as expressions, enabling concise and expressive code.

**Detailed Explanation**:  
For example, an `if` statement can directly return a value:  
```bash
var result = if (x > 10) { x } else { 0 };
```
Here, `result` will hold the value of `x` if the condition is true, or `0` otherwise. This feature simplifies code by reducing the need for additional variables or explicit return statements.  
*Further examples and chaining techniques are discussed in the appendix.*

---

### **Implicit Return on Omitted Semicolons**

- **Behavior**:  
  When a semicolon is omitted at the end of a statement, Vasuki treats it as an implicit `return`. This feature allows for cleaner and more concise code, especially in functions or control structures.

**Detailed Explanation**:  
For instance:  
```bash
def add(a, b) {
    a + b  // Implicitly returns the sum of a and b
}
```
This behavior reduces boilerplate code but requires careful use to avoid unintended returns.  
*Best practices and potential pitfalls are covered in the appendix.*

---

## **Error Handling and Debugging**

Robust error handling is a cornerstone of effective development. Vasuki provides detailed error messages and debugging tools to help developers identify and resolve issues efficiently.

### **Common Error Types**

1. **Syntax Errors**:  
   - **Examples**: Missing semicolons, unmatched braces, or typos in keywords.  
   - **Detailed Explanation**:  
     Syntax errors occur when the code violates Vasuki's grammatical rules. For example:  
     ```bash
     var x = 10  // Missing semicolon
     ```
     Vasuki will report an error indicating the missing semicolon.  
     *Step-by-step debugging procedures are provided in the appendix.*

2. **Runtime Errors**:  
   - **Examples**: Undefined variables, invalid operations (e.g., division by zero).  
   - **Detailed Explanation**:  
     Runtime errors occur during program execution. For instance:  
     ```bash
     var result = 10 / 0;  // Division by zero
     ```
     Vasuki will halt execution and provide a stack trace to help locate the issue.  
     *Strategies for handling runtime errors are discussed in detail.*

3. **Lexical/Parsing Errors**:  
   - **Examples**: Invalid tokens, unexpected symbols, or malformed expressions.  
   - **Detailed Explanation**:  
     These errors occur when the lexer or parser encounters invalid input. For example:  
     ```bash
     var 123abc = 10;  // Invalid variable name
     ```
     Vasuki will report an error indicating the invalid token.  
     *Practical tips for resolving such errors are included in the appendix.*

---

### **Troubleshooting Tips**

To effectively debug your Vasuki programs, follow these general guidelines:

- **Read Error Messages Carefully**:  
  Vasuki provides detailed error messages that often indicate the exact issue and its location.

- **Isolate Problematic Code Blocks**:  
  Test individual sections of your code in isolation to identify the source of the error.

- **Use Comments to Annotate Code**:  
  Add comments to clarify complex logic or temporarily disable sections of code for testing.

- **Review Documentation**:  
  Refer to this documentation and the appendix for guidance on correct syntax, behavior, and best practices.

By following these tips and leveraging Vasuki's debugging tools, you can quickly identify and resolve issues in your code.

---

## **Example Program Walkthrough**

Below is a comprehensive advanced example that integrates many language features, including dual scoping, control structures with return values, and implicit returns.

```bash
// Advanced Example: Comprehensive Integration

// Declare and initialize variables
var x = 10;
var y = 5;

// Compute the sum of x and y
var sum = x + y;
print("Sum: " + sum);  // Expected output: Sum: 15

// Conditional with implicit return
if (sum > 10) {
    print("Sum is greater than 10");
} else {
    print("Sum is 10 or less");
}

// For loop with control structure returning a value implicitly
for (var i = 0; i < 3; i = i + 1) {
    print("Iteration " + i);
}

// Function definition (advanced usage)
def add(a, b) {
    a + b  // Implicit return of a+b due to omitted semicolon
}
print("Addition: " + add(3, 4));  // Expected output: Addition: 7

// Array usage with one-based indexing
var arr = [10, 20, 30];
print("Second element: " + arr[2]);  // Expected output: Second element: 20

// Using labels for custom flow control
startLabel:
    print("Inside labeled block");
goandreturn startLabel;  // Jumps to startLabel and returns from the block
```

Detailed Explanation:
• Variables & Arithmetic:

x and y are initialized, and their sum is computed (returning an integer). • Conditional Statement:

The if statement evaluates sum > 10 and executes the appropriate block. If semicolons are omitted, the block’s value is implicitly returned. • Loop:

The for loop iterates three times, demonstrating implicit return behavior. • Functions:

The function add is defined using implicit return syntax. It demonstrates how parameters are passed and how the function returns a value. • Arrays:

Arrays are created with literal syntax and accessed using one-based indexing. • Labels:

Labels and the goandreturn statement allow for advanced control flow, illustrating non-linear execution paths.

---

## **Appendix: Extended Explanations and Examples**

Appendix A: Detailed Variable Scoping and Environment Handling
In Vasuki, variable resolution uses both static and dynamic scoping.
Static scoping resolves variables in the context of their declaration.
Dynamic scoping considers the call stack for variable resolution.
Example:

```bash
var globalVar = 100;
def testScope() {
    print(globalVar);  // Resolves via static scope if not shadowed dynamically
}
testScope();
```

Explanation: The function testScope prints globalVar by looking up the static environment.
(…continued in-depth explanation…)

Appendix B: Extended Operator Precedence and Evaluation Order
In Vasuki, operators follow standard mathematical precedence.
Exponentiation (**) is evaluated before multiplication and division.
Example:

```bash
var result = 2 ** 3 * 4;
```

Explanation:

2 ** 3 evaluates to 8, then multiplied by 4 gives 32.
(Detailed breakdown of each step…)

Appendix C: In-Depth Control Structures and Implicit Return Mechanism
Control structures in Vasuki are unique in that they return a value.
Example:

```bash
var condResult = if (x < 20) { 100 } else { 200 }
```

Explanation:

If x < 20 is true, condResult becomes 100; otherwise, it becomes 200.
(Extended discussion on using control structures in expressions, including pitfalls and best practices.)

Appendix D: Error Handling – Extended Debugging Techniques
Syntax errors typically occur due to missing semicolons.
Example error and fix:

```bash
var a = 10  // Missing semicolon causes implicit return and potential errors
var b = a + 5;
```

Corrected:

```bash
var a = 10;
var b = a + 5;
```

(Extensive discussion on interpreting error messages, with over 100 troubleshooting cases documented in detail.)

Appendix E: Full Advanced Examples and Use Cases
Here we compile a series of advanced examples that utilize every language feature.
Example: Complex function with nested control structures, array manipulation, and label usage.

```bash
def complexFunction(a, b) {
    var result = if (a > b) { a - b } else { b - a }
    for (var i = 0; i < result; i = i + 1) {
        print("Loop iteration: " + i);
    }
    result  // Implicit return of result
}
print("Complex Function Output: " + complexFunction(15, 5));
```

(Detailed explanation of each part of the function, including scoping, control flow, and return behavior.)

---
</div>


