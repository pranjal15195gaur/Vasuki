---
title: "Vasuki Beginner's Documentation"
format: html
css: assets/custom.css
---


<div style="position: fixed; left: 0; top: 0; width: 200px; height: 100%; background-color: #f4f4f4; padding: 10px; overflow-y: auto; border-right: 1px solid #ddd;">
  <h3>Navigation</h3>
  <ul style="list-style-type: none; padding: 0;">
    <li><a href="https://github.com/YourUser/VasukiDocs/edit/main/beginners.qmd" target="_blank">Edit on GitHub</a></li>
    <li><a href="#introduction">Introduction</a></li>
    <li><a href="#getting-started">Getting Started</a></li>
    <li><a href="#basic-syntax">Basic Syntax</a></li>
    <li><a href="#control-structures">Control Structures</a></li>
    <li><a href="#functions">Functions</a></li>
    <li><a href="#arrays">Arrays</a></li>
    <li><a href="#special-features">Special Features</a></li>
    <li><a href="#error-handling">Error Handling</a></li>
    <li><a href="#example-program-walkthrough">Example Program Walkthrough</a></li>
  </ul>
</div>

# **Vasuki Beginner's Documentation**

Welcome to the beginner's guide for Vasuki! This documentation is designed to help you get started with the Vasuki scripting language. It covers the basics of syntax, control structures, functions, and arrays, along with some of Vasuki's unique features.

---

## **Introduction**

Vasuki is a lightweight scripting language that is simple to learn yet powerful enough for advanced use cases. It is designed with the following goals in mind:

- **Ease of Use**: Minimalistic syntax that is easy to read and write.
- **Flexibility**: Features like dual scoping mechanisms and implicit returns make it versatile.
- **Powerful Constructs**: Control structures and functions are designed to be expressive and concise.

---

## **Getting Started**

To begin using Vasuki, you need to install the Vasuki interpreter. Follow the steps below:

1. Download the Vasuki interpreter from the official website.
2. Install it on your system by following the installation guide.
3. Open a terminal and run the Vasuki REPL (Read-Eval-Print Loop) using the command:
   ```bash
   vasuki
   ```
4. Start writing your first Vasuki program!

---

## **Basic Syntax**

Vasukiâ€™s syntax is designed to be intuitive and beginner-friendly. This section provides a detailed explanation of the key elements of the language, along with examples to help you understand how to use them effectively.

---

### **Variable Declaration**

Variables in Vasuki are declared using the `var` keyword. A variable is a named storage location that holds a value, which can be updated or reused later in the program.

#### **Syntax**
```bash
var variableName = value;
```

#### **Example**
```bash
var x = 10;
print("Value of x: " + x);  // Output: Value of x: 10
```

**Explanation**:
- The `var` keyword is used to declare a variable named `x`.
- The value `10` is assigned to `x`.
- The `print` statement outputs the value of `x`.

---

### **Expressions**

An expression in Vasuki is a combination of variables, values, and operators that evaluates to a single value. Expressions are used in assignments, conditions, and function calls.

#### **Syntax**
```bash
var result = expression;
```

#### **Example**
```bash
var x = 10;
var y = x + 5;
print("Value of y: " + y);  // Output: Value of y: 15
```

**Explanation**:
- The variable `x` is assigned the value `10`.
- The expression `x + 5` evaluates to `15` and is assigned to `y`.
- The `print` statement outputs the value of `y`.

---

### **Blocks**

Blocks are groups of statements enclosed in curly braces `{ }`. They are used to define the body of control structures, functions, and other constructs.

#### **Syntax**
```bash
{
    // Statements
}
```

#### **Example**
```bash
var x = 10;
if (x > 5) {
    print("x is greater than 5");
}
```

**Explanation**:
- The block `{ print("x is greater than 5"); }` is executed if the condition `x > 5` is true.

---

### **Control Structures**

Control structures allow you to control the flow of your program. Vasuki supports `if`, `for`, and `while` constructs.

---

#### **If Statements**

The `if` statement evaluates a condition and executes the corresponding block of code if the condition is true. An optional `else` block can be used to handle the case where the condition is false.

#### **Syntax**
```bash
if (condition) {
    // Code to execute if condition is true
} else {
    // Code to execute if condition is false
}
```

#### **Example**
```bash
var x = 10;
if (x > 5) {
    print("x is greater than 5");
} else {
    print("x is 5 or less");
}
```

**Explanation**:
- The condition `x > 5` is evaluated.
- If true, the block `{ print("x is greater than 5"); }` is executed.
- Otherwise, the block `{ print("x is 5 or less"); }` is executed.

---

#### **For Loops**

The `for` loop is used for iteration. It allows you to repeat a block of code a specific number of times.

#### **Syntax**
```bash
for (initialization; condition; increment) {
    // Code to execute in each iteration
}
```

#### **Example**
```bash
for (var i = 0; i < 5; i = i + 1) {
    print("Iteration: " + i);
}
```

**Explanation**:
- The loop starts with `i = 0`.
- The condition `i < 5` is checked before each iteration.
- The block `{ print("Iteration: " + i); }` is executed, and `i` is incremented by 1 after each iteration.

---

#### **While Loops**

The `while` loop repeats a block of code as long as a condition is true.

#### **Syntax**
```bash
while (condition) {
    // Code to execute while condition is true
}
```

#### **Example**
```bash
var count = 0;
while (count < 3) {
    print("Count: " + count);
    count = count + 1;
}
```

**Explanation**:
- The loop starts with `count = 0`.
- The condition `count < 3` is checked before each iteration.
- The block `{ print("Count: " + count); count = count + 1; }` is executed until the condition becomes false.

---

### **Functions**

Functions in Vasuki allow you to encapsulate reusable blocks of code. They can take input parameters, perform operations, and return a result.

---

#### **Defining Functions**

Functions are defined using the `def` keyword, followed by the function name, parameters, and a block of code.

#### **Syntax**
```bash
def functionName(parameter1, parameter2, ...) {
    // Code to execute
    return value;  // Optional
}
```

#### **Example**
```bash
def add(a, b) {
    return a + b;
}
```

**Explanation**:
- The function `add` takes two parameters, `a` and `b`.
- It returns the sum of `a` and `b`.

---

#### **Calling Functions**

You can call a function by using its name and passing the required arguments.

#### **Example**
```bash
var result = add(3, 4);
print("Result: " + result);  // Output: Result: 7
```

**Explanation**:
- The function `add` is called with arguments `3` and `4`.
- The result of the function (`7`) is assigned to the variable `result`.

---

## **Control Structures**

Control structures in Vasuki allow you to control the flow of your program. They include `if`, `for`, and `while`.

### **If Statements**

The `if` statement evaluates a condition and executes the corresponding block of code:
```bash
var x = 10;
if (x > 5) {
    print("x is greater than 5");
} else {
    print("x is 5 or less");
}
```

### **For Loops**

The `for` loop is used for iteration:
```bash
for (var i = 0; i < 5; i = i + 1) {
    print("Iteration: " + i);
}
```

### **While Loops**

The `while` loop repeats a block of code as long as a condition is true:
```bash
var count = 0;
while (count < 3) {
    print("Count: " + count);
    count = count + 1;
}
```

---

## **Functions**

Functions in Vasuki allow you to encapsulate reusable blocks of code.

### **Defining Functions**

Functions are defined using the `def` keyword:
```bash
def add(a, b) {
    return a + b;
}
```

### **Calling Functions**

You can call a function by using its name and passing the required arguments:
```bash
var result = add(3, 4);
print("Result: " + result);  // Output: Result: 7
```

### **Higher-Order Functions**

Vasuki supports higher-order functions, which are functions that can take other functions as arguments or return functions as results.

#### **Functions as Arguments**

You can pass functions as arguments to other functions:

```bash
// Function to apply an operation to each element of an array
def apply_to_array(arr, operation) {
    var result = [];
    var i = 1;
    while (i <= length(arr)) {
        push(result, operation(arr[i]));
        i = i + 1;
    };
    return result;
};

// Function to double a number
def double(x) {
    return x * 2;
};

// Function to square a number
def square(x) {
    return x * x;
};

var numbers = [1, 2, 3, 4, 5];
var doubled = apply_to_array(numbers, double);
var squared = apply_to_array(numbers, square);

print("Doubled: " + doubled);  // Output: Doubled: [2, 4, 6, 8, 10]
print("Squared: " + squared);  // Output: Squared: [1, 4, 9, 16, 25]
```

**Explanation**:
- The `apply_to_array` function takes an array and a function as arguments.
- It applies the function to each element of the array and returns a new array with the results.
- We use it with the `double` and `square` functions to transform the array.

---

## **Arrays**

Arrays in Vasuki are used to store collections of values.

### **Creating Arrays**

You can create an array using square brackets:
```bash
var arr = [1, 2, 3];
```

### **Accessing Elements**

Array elements are accessed using one-based indexing:
```bash
print(arr[1]);  // Output: 1
print(arr[2]);  // Output: 2
```

### **Array Functions**

Vasuki provides several built-in functions for working with arrays:

- **length(array)**: Returns the number of elements in an array
- **push(array, element)**: Adds an element to the end of an array
- **pop(array)**: Removes and returns the last element of an array
- **max(array)**: Returns the maximum value in the array
- **min(array)**: Returns the minimum value in the array

#### **Example**
```bash
var numbers = [1, 2, 3];
print("Array length: " + length(numbers));  // Output: Array length: 3

push(numbers, 4);
print("Updated array: " + numbers);  // Output: Updated array: [1, 2, 3, 4]

var last = pop(numbers);
print("Popped element: " + last);  // Output: Popped element: 4
print("Array after pop: " + numbers);  // Output: Array after pop: [1, 2, 3]

var maxValue = max(numbers);
print("Maximum value: " + maxValue);  // Output: Maximum value: 3

var minValue = min(numbers);
print("Minimum value: " + minValue);  // Output: Minimum value: 1
```

---

## **Dictionary Operations**

Vasuki supports dictionaries (key-value pairs) through built-in functions:

### **Creating and Manipulating Dictionaries**

- **dict()**: Creates a new dictionary
- **dict_put(dict, key, value)**: Adds or updates a key-value pair
- **dict_get(dict, key)**: Gets the value for a key
- **dict_contains(dict, key)**: Checks if a key exists
- **dict_remove(dict, key)**: Removes a key-value pair

#### **Example**
```bash
var person = dict();
dict_put(person, "name", "Alice");
dict_put(person, "age", 30);
dict_put(person, "city", "New York");

print("Name: " + dict_get(person, "name"));  // Output: Name: Alice
print("Has email? " + dict_contains(person, "email"));  // Output: Has email? false

dict_remove(person, "city");
print("City exists? " + dict_contains(person, "city"));  // Output: City exists? false
```

### **Dictionary Utilities**

- **dict_keys(dict)**: Returns an array of all keys
- **dict_values(dict)**: Returns an array of all values
- **dict_size(dict)**: Returns the number of key-value pairs
- **dict_clear(dict)**: Removes all key-value pairs

#### **Example**
```bash
var scores = dict();
dict_put(scores, "Alice", 95);
dict_put(scores, "Bob", 87);
dict_put(scores, "Charlie", 92);

print("Number of students: " + dict_size(scores));  // Output: Number of students: 3

var students = dict_keys(scores);
print("Students: " + students);  // Output: Students: ["Alice", "Bob", "Charlie"]

var allScores = dict_values(scores);
print("Scores: " + allScores);  // Output: Scores: [95, 87, 92]

dict_clear(scores);
print("Dictionary size after clear: " + dict_size(scores));  // Output: Dictionary size after clear: 0
```

---

## **String Functions**

Vasuki provides a rich set of functions for working with strings:

### **String Manipulation**

- **substring(str, start, length)**: Extracts a portion of a string
- **uppercase(str)**: Converts a string to uppercase
- **lowercase(str)**: Converts a string to lowercase
- **trim(str)**: Removes whitespace from the beginning and end of a string
- **replace(str, old, new)**: Replaces all occurrences of a substring

#### **Example**
```bash
var message = "Hello, World!";
print(uppercase(message));  // Output: HELLO, WORLD!
print(lowercase(message));  // Output: hello, world!
print(substring(message, 0, 5));  // Output: Hello
print(trim("  Hello  "));  // Output: Hello
print(replace(message, "World", "Vasuki"));  // Output: Hello, Vasuki!
```

### **String Inspection**

- **length(str)**: Returns the length of a string
- **contains(str, substr)**: Checks if a string contains a substring
- **startswith(str, prefix)**: Checks if a string starts with a prefix
- **endswith(str, suffix)**: Checks if a string ends with a suffix

#### **Example**
```bash
var text = "Vasuki Programming Language";
print("Length: " + length(text));  // Output: Length: 28
print("Contains 'Program': " + contains(text, "Program"));  // Output: Contains 'Program': true
print("Starts with 'Vas': " + startswith(text, "Vas"));  // Output: Starts with 'Vas': true
print("Ends with 'age': " + endswith(text, "age"));  // Output: Ends with 'age': true
```

### **String Splitting**

- **split(str, delimiter)**: Splits a string into an array of substrings

#### **Example**
```bash
var csv = "Alice,Bob,Charlie,Diana";
var names = split(csv, ",");
print("First name: " + names[1]);  // Output: First name: Alice
print("Last name: " + names[4]);  // Output: Last name: Diana
```

---

## **Type Operations**

Vasuki includes functions for working with types:

### **Type Checking**

- **is_int(value)**: Checks if a value is an integer
- **is_float(value)**: Checks if a value is a float
- **is_string(value)**: Checks if a value is a string
- **is_bool(value)**: Checks if a value is a boolean
- **is_array(value)**: Checks if a value is an array
- **is_dict(value)**: Checks if a value is a dictionary
- **is_function(value)**: Checks if a value is a function
- **get_type(value)**: Returns the type of a value as a string

#### **Example**
```bash
var num = 42;
var text = "Hello";
var arr = [1, 2, 3];

print("num is int: " + is_int(num));  // Output: num is int: true
print("text is string: " + is_string(text));  // Output: text is string: true
print("arr is array: " + is_array(arr));  // Output: arr is array: true

print("Type of num: " + get_type(num));  // Output: Type of num: int
print("Type of text: " + get_type(text));  // Output: Type of text: string
```

### **Type Conversion**

- **to_int(value)**: Converts a value to an integer
- **to_float(value)**: Converts a value to a float
- **to_string(value)**: Converts a value to a string
- **to_bool(value)**: Converts a value to a boolean

#### **Example**
```bash
var numStr = "42";
var floatStr = "3.14";
var boolStr = "true";

var num = to_int(numStr);
print("Converted to int: " + num + " (type: " + get_type(num) + ")");  // Output: Converted to int: 42 (type: int)

var pi = to_float(floatStr);
print("Converted to float: " + pi + " (type: " + get_type(pi) + ")");  // Output: Converted to float: 3.14 (type: float)

var flag = to_bool(boolStr);
print("Converted to bool: " + flag + " (type: " + get_type(flag) + ")");  // Output: Converted to bool: true (type: bool)
```

---

## **Input/Output Functions**

Vasuki provides several functions for reading input from the user:

### **Basic Input**

- **read_line()**: Reads a line of text from the terminal
- **read_int()**: Reads an integer from the terminal
- **read_float()**: Reads a floating-point number from the terminal

#### **Example**
```bash
print("What is your name?");
var name = read_line();
print("Hello, " + name + "!");

print("How old are you?");
var age = read_int();
print("In 5 years, you will be " + (age + 5) + " years old.");

print("Enter a decimal number:");
var decimal = read_float();
print("You entered: " + decimal);
```

### **Advanced Input**

- **read_ints(count)**: Reads multiple integers
- **read_floats(count)**: Reads multiple floating-point numbers
- **read_lines(count)**: Reads multiple lines
- **read_all()**: Reads all available input until EOF

#### **Example**
```bash
print("Enter 3 numbers:");
var numbers = read_ints(3);
print("Sum: " + (numbers[1] + numbers[2] + numbers[3]));

print("Enter 2 lines of text:");
var lines = read_lines(2);
print("You entered: " + lines[1] + " and " + lines[2]);
```

## **Random Number Generation**

Vasuki provides functions for generating random numbers:

### **Random Number Functions**

- **random_int(min, max)**: Generates a random integer between min and max (inclusive)
- **random_float()**: Generates a random floating-point number between 0 and 1
- **random_uniform(min, max)**: Generates a random floating-point number between min and max

#### **Example**
```bash
// Generate random integers
var dice_roll = random_int(1, 6);
print("Dice roll: " + dice_roll);

// Generate random floating-point numbers
var probability = random_float();
print("Random probability: " + probability);

// Generate random floating-point numbers in a range
var temperature = random_uniform(15.0, 25.0);
print("Random temperature: " + temperature + "Â°C");
```

## **Regular Expressions**

Vasuki supports regular expressions for pattern matching and string manipulation:

### **Regular Expression Functions**

- **string_match(str, pattern)**: Checks if the string matches the regular expression pattern
- **string_search(str, pattern)**: Returns the 1-based index of the first match, or 0 if not found
- **string_replace(str, pattern, replacement)**: Replaces all occurrences of the pattern with the replacement
- **string_split(str, pattern)**: Splits the string by the pattern
- **string_match_all(str, pattern)**: Returns an array of all matches

#### **Example**
```bash
var text = "The quick brown fox jumps over the lazy dog";

// Check if a string matches a pattern
print("Starts with 'The': " + string_match(text, "^The"));  // Output: true

// Find the position of a pattern
var position = string_search(text, "fox");
print("Position of 'fox': " + position);  // Output: 17 (1-based indexing)

// Replace a pattern
var replaced = string_replace(text, "fox", "cat");
print("After replacement: " + replaced);  // Output: The quick brown cat jumps over the lazy dog

// Split a string by a pattern
var words = string_split(text, " ");
print("First word: " + words[1]);  // Output: The

// Find all matches
var words_with_o = string_match_all(text, "\\w*o\\w*");
print("Words containing 'o': " + words_with_o);  // Output: ["brown", "fox", "over", "dog"]
```

---

## **Special Features**

Vasuki includes several unique features that make it stand out. These features are designed to enhance flexibility, readability, and debugging capabilities.

### **Global Variables and Functions**

Vasuki supports global variables and functions that can be accessed from any context through lexical scoping.

#### **Global Variables**

Global variables are declared at the top level:

```bash
var counter = 0;  // Global variable

def increment() {
    counter = counter + 1;  // Accesses the global variable
    return counter;
};

print(increment());  // Output: 1
print(increment());  // Output: 2
```

Global variables are accessible from any function through lexical scoping.

#### **Global Functions**

Similarly, functions declared at the top level are globally accessible:

```bash
def greet(name) {
    print("Hello, " + name + "!");
};

def call_greeter() {
    greet("World");  // Calls the global function
};

call_greeter();  // Output: Hello, World!
```

Global functions can be called from any context, making them useful for utility functions that need to be accessed throughout your program.

### **Break and Continue Statements**

Vasuki supports `break` and `continue` statements for controlling loop execution:

#### **Break Statement**

The `break` statement exits a loop immediately:

```bash
var i = 1;
while (i <= 10) {
    if (i == 5) {
        break;  // Exit the loop when i equals 5
    };
    print(i);
    i = i + 1;
};
// Output: 1 2 3 4
```

#### **Continue Statement**

The `continue` statement skips the rest of the current iteration and proceeds to the next one:

```bash
var i = 0;
while (i < 10) {
    i = i + 1;
    if (i % 2 == 0) {
        continue;  // Skip even numbers
    };
    print(i);
};
// Output: 1 3 5 7 9
```

---

### **Control Structures with Return Values**

Control structures in Vasuki, such as `if`, `for`, and `while`, return the value of the last executed statement within their block. This allows these constructs to be used as expressions, enabling concise and expressive code.

#### **Example: If Statement with Return Value**
```bash
var x = 10;
var result = if (x > 5) { x } else { 0 };
print("Result: " + result);  // Output: Result: 10
```

**Explanation**:
In this example, the `if` statement evaluates the condition `x > 5`. Since the condition is true, the value of `x` (10) is returned and assigned to the variable `result`.

#### **Example: For Loop with Return Value**
```bash
var sum = 0;
for (var i = 1; i <= 3; i = i + 1) {
    sum = sum + i;
}
print("Sum: " + sum);  // Output: Sum: 6
```

**Explanation**:
The `for` loop iterates from 1 to 3, adding each value to `sum`. The final value of `sum` is returned after the loop completes.

---

### **Implicit Return on Omitted Semicolons**

In Vasuki, if a semicolon is omitted at the end of a statement, the language treats it as an implicit `return`. This feature allows for cleaner and more concise code, especially in functions or control structures.

#### **Example: Implicit Return in Functions**
```bash
def multiply(a, b) {
    a * b  // Implicitly returns the product
}

print(multiply(3, 4));  // Output: 12
```

**Explanation**:
In this example, the function `multiply` does not explicitly use the `return` keyword. Instead, the last expression `a * b` is implicitly returned.

#### **Example: Implicit Return in Control Structures**
```bash
var result = if (x > 5) { x } else { 0 };
print("Result: " + result);  // Output: Result: 10
```

**Explanation**:
The `if` statement implicitly returns the value of the executed block, which is assigned to the variable `result`.

### **Labels and Non-linear Control Flow**

Vasuki supports labels and non-linear control flow through the `goandreturn` statement, which allows you to jump to a labeled section of code and then return to the original execution point.

#### **Labels**

Labels are defined using the syntax `labelName:`:

```bash
start:
    print("This is the start label");
```

#### **GoAndReturn Statement**

The `goandreturn` statement jumps to a label, executes the code, and then returns to the point after the `goandreturn` statement:

```bash
print("Before jump");

goandreturn start;  // Jump to the 'start' label and return

print("After jump");

start:
    print("Inside labeled block");
```

**Output**:
```
Before jump
Inside labeled block
After jump
```

**Explanation**:
The `goandreturn` statement temporarily transfers control to the labeled block, executes it, and then returns to continue execution after the `goandreturn` statement.

---

### **Error Handling**

Vasuki provides detailed error messages to help you debug your code. Below are some common error types and how to handle them.

#### **Syntax Errors**
Syntax errors occur when the code violates Vasuki's grammatical rules.

**Example: Missing Semicolon**
```bash
var x = 10  // Missing semicolon
```

**Error Message**:
`SyntaxError: Expected ';' at the end of the statement.`

**Solution**:
Add the missing semicolon:
```bash
var x = 10;
```

#### **Runtime Errors**
Runtime errors occur during program execution, such as dividing by zero or accessing undefined variables.

**Example: Division by Zero**
```bash
var result = 10 / 0;  // Division by zero
```

**Error Message**:
`RuntimeError: Division by zero.`

**Solution**:
Ensure that the denominator is not zero:
```bash
var denominator = 2;
var result = 10 / denominator;
```

#### **Lexical/Parsing Errors**
Lexical or parsing errors occur when the lexer or parser encounters invalid input.

**Example: Invalid Variable Name**
```bash
var 123abc = 10;  // Invalid variable name
```

**Error Message**:
`LexicalError: Invalid token '123abc'.`

**Solution**:
Use a valid variable name:
```bash
var validName = 10;
```

---

## **Bytecode Execution**

Vasuki programs can be executed using a bytecode virtual machine, which provides better performance than direct interpretation.

### **Running Programs with Bytecode**

To run a Vasuki program using the bytecode implementation:

```bash
python run_bytecode.py your_program.vasuki
```

This will compile your program to bytecode and execute it on the Vasuki virtual machine.

### **Understanding Bytecode**

Bytecode is a low-level representation of your program that can be efficiently executed by the virtual machine. When you run a program with the bytecode implementation, the following steps occur:

1. Your Vasuki code is parsed into an Abstract Syntax Tree (AST)
2. The AST is converted to bytecode instructions
3. The bytecode is executed by the virtual machine

### **Example: Bytecode Execution**

Consider this simple program:

```bash
def add(a, b) {
    return a + b;
};

print(add(5, 10));
```

When executed with the bytecode implementation, it produces the following output:

```
15
```

Behind the scenes, the program is converted to bytecode instructions that push values onto a stack, perform operations, and call functions.

---

## **Example Program Walkthrough**

Here is a program that demonstrates Vasuki's unique features, including control structures with return values and implicit returns.

```bash
// Declare variables
var x = 10;
var y = 5;

// Compute the sum
var sum = x + y;
print("Sum: " + sum);  // Output: Sum: 15

// Use an if statement with return value
var result = if (sum > 10) { sum } else { 0 };
print("Result: " + result);  // Output: Result: 15

// Define and call a function with implicit return
def add(a, b) {
    a + b  // Implicit return
}
print("Addition: " + add(3, 4));  // Output: Addition: 7

// Create and access an array
var arr = [10, 20, 30];
print("First element: " + arr[1]);  // Output: First element: 10


```

**Explanation**:
- The program demonstrates variable declaration, control structures, and functions.
- It highlights Vasuki's unique features, such as implicit returns and control structures with return values.
- The example shows how arrays are created and accessed using one-based indexing.

---
