"""
Simple test script to verify the distribution of random numbers generated by our custom random generator.
This script runs the Vasuki random_int function multiple times and analyzes the distribution.
"""

import subprocess
import os

# Number of samples to generate
NUM_SAMPLES = 1000
MIN_VALUE = 1
MAX_VALUE = 10

# Generate a Vasuki program that outputs random numbers
vasuki_program = f"""
// Generate {NUM_SAMPLES} random integers between {MIN_VALUE} and {MAX_VALUE}
for (var i = 0; i < {NUM_SAMPLES}; i = i + 1) {{
    print(random_int({MIN_VALUE}, {MAX_VALUE}));
}}
"""

# Save the program to a temporary file
with open("temp_random_test.vasuki", "w") as f:
    f.write(vasuki_program)

# Run the Vasuki program and capture the output
result = subprocess.run(["cd", "../..", "&&", "python3", "-m", "compiler.main", "compiler/presentation/temp_random_test.vasuki"],
                        capture_output=True, text=True, shell=True)

# Print the raw output for debugging
print("Raw output:")
print(result.stdout)
print("Error output:")
print(result.stderr)

# Parse the output to get the random numbers
random_numbers = []
if result.stdout:
    for line in result.stdout.strip().split('\n'):
        try:
            num = int(line.strip())
            random_numbers.append(num)
        except ValueError:
            pass  # Skip lines that are not integers

# Count occurrences of each number
counts = [0] * (MAX_VALUE + 1)
for num in random_numbers:
    if MIN_VALUE <= num <= MAX_VALUE:
        counts[num] += 1

# Calculate and display statistics
print(f"Generated {len(random_numbers)} random numbers between {MIN_VALUE} and {MAX_VALUE}.")

if len(random_numbers) > 0:
    print("\nDistribution:")
    print("-" * 40)
    print(f"{'Value':<10}{'Count':<10}{'Percentage':<10}")
    print("-" * 40)

    expected = len(random_numbers) / (MAX_VALUE - MIN_VALUE + 1)
    chi_square = 0

    for i in range(MIN_VALUE, MAX_VALUE + 1):
        percentage = counts[i] / len(random_numbers) * 100
        print(f"{i:<10}{counts[i]:<10}{percentage:.2f}%")
        chi_square += ((counts[i] - expected) ** 2) / expected

    print("-" * 40)
    print(f"Expected count per value: {expected:.2f}")
    print(f"Chi-square test statistic: {chi_square:.2f}")
    print("Lower chi-square values indicate more uniform distribution (closer to random).")
else:
    print("No random numbers were generated. Check the error output above.")

# Clean up
os.remove("temp_random_test.vasuki")
