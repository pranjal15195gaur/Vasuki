"""
Test script to verify the distribution of random numbers generated by our custom random generator.
This script runs the Vasuki random_int function multiple times and plots the distribution.
"""

import subprocess
import matplotlib.pyplot as plt
import numpy as np
import re

# Number of samples to generate
NUM_SAMPLES = 10000
MIN_VALUE = 1
MAX_VALUE = 10

# Generate a Vasuki program that outputs random numbers
vasuki_program = f"""
// Generate {NUM_SAMPLES} random integers between {MIN_VALUE} and {MAX_VALUE}
for (var i = 0; i < {NUM_SAMPLES}; i = i + 1) {{
    print(random_int({MIN_VALUE}, {MAX_VALUE}));
}}
"""

# Save the program to a temporary file
with open("temp_random_test.vasuki", "w") as f:
    f.write(vasuki_program)

# Run the Vasuki program and capture the output
result = subprocess.run(["python", "-m", "compiler.main", "temp_random_test.vasuki"], 
                        capture_output=True, text=True)

# Parse the output to get the random numbers
random_numbers = []
for line in result.stdout.strip().split('\n'):
    try:
        num = int(line.strip())
        random_numbers.append(num)
    except ValueError:
        pass  # Skip lines that are not integers

# Create a histogram of the random numbers
plt.figure(figsize=(10, 6))
bins = np.arange(MIN_VALUE - 0.5, MAX_VALUE + 1.5, 1)
plt.hist(random_numbers, bins=bins, alpha=0.7, color='blue', edgecolor='black')
plt.xticks(range(MIN_VALUE, MAX_VALUE + 1))
plt.xlabel('Random Value')
plt.ylabel('Frequency')
plt.title(f'Distribution of {len(random_numbers)} Random Integers between {MIN_VALUE} and {MAX_VALUE}')
plt.grid(axis='y', alpha=0.75)

# Calculate and display statistics
counts = np.bincount(random_numbers, minlength=MAX_VALUE+1)[MIN_VALUE:]
percentages = counts / len(random_numbers) * 100
expected_percentage = 100 / (MAX_VALUE - MIN_VALUE + 1)

for i, (count, percentage) in enumerate(zip(counts, percentages), MIN_VALUE):
    plt.text(i, count + 50, f'{percentage:.1f}%', ha='center')

plt.axhline(y=len(random_numbers)/(MAX_VALUE-MIN_VALUE+1), color='r', linestyle='--', 
            label=f'Expected ({expected_percentage:.1f}%)')
plt.legend()

# Save the plot
plt.tight_layout()
plt.savefig('random_distribution.png')
plt.close()

print(f"Generated {len(random_numbers)} random numbers.")
print(f"Distribution saved to 'random_distribution.png'.")

# Calculate chi-square test statistic to check for uniformity
expected = len(random_numbers) / (MAX_VALUE - MIN_VALUE + 1)
chi_square = sum((count - expected) ** 2 / expected for count in counts)
print(f"Chi-square test statistic: {chi_square:.2f}")
print(f"Lower values indicate more uniform distribution (closer to random).")
