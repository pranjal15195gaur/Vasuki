// Comprehensive example demonstrating multiple Vasuki features
// This example implements a simple student management system

// Student class (simulated using dictionaries)
def create_student(id, name, age, grades) {
    var student = dict();
    dict_put(student, "id", id);
    dict_put(student, "name", name);
    dict_put(student, "age", age);
    dict_put(student, "grades", grades);
    return student;
};

// Calculate average grade for a student
def calculate_average(student) {
    var grades = dict_get(student, "grades");
    var sum = 0;
    var i = 1;

    while (i <= length(grades)) {
        sum = sum + grades[i];
        i = i + 1;
    };

    if (length(grades) == 0) {
        return 0;
    } else {
        return sum / length(grades);
    };
};

// Get student grade status
def get_grade_status(average) {
    if (average >= 90) {
        return "A";
    } else if (average >= 80) {
        return "B";
    } else if (average >= 70) {
        return "C";
    } else if (average >= 60) {
        return "D";
    } else {
        return "F";
    };
};

// Print student information
def print_student(student) {
    print("ID: " + dict_get(student, "id"));
    print("Name: " + dict_get(student, "name"));
    print("Age: " + dict_get(student, "age"));

    var grades = dict_get(student, "grades");
    print("Grades: ");
    var i = 1;
    while (i <= length(grades)) {
        print("  Subject " + i + ": " + grades[i]);
        i = i + 1;
    };

    var average = calculate_average(student);
    var status = get_grade_status(average);

    print("Average: " + average);
    print("Grade Status: " + status);
};

// Find student by ID
def find_student_by_id(students, id) {
    var i = 1;
    var found = false;
    var result = dict();

    while (i <= length(students) and found == false) {
        var student = students[i];
        var student_id = dict_get(student, "id");
        print("Checking student " + i + " with ID: " + student_id);

        if (student_id == id) {
            print("Found student with ID: " + id);
            result = student;
            found = true;
        } else {
            i = i + 1;
        };
    };

    if (found == false) {
        print("Student with ID " + id + " not found");
    };

    return result;
};

// Add a grade to a student
def add_grade(student, grade) {
    // Check if the student is valid
    if (dict_contains(student, "grades") == false) {
        print("Error: Invalid student object");
        return 0; // Return 0 to indicate failure
    };

    // Get the current grades
    var grades = dict_get(student, "grades");
    print("Current grades: " + grades);

    // Create a new array for the updated grades
    var new_grades = [];

    // Check if grades is a valid array
    if (grades != 0 and grades != "") {
        // Copy existing grades
        var i = 1;
        var grades_length = length(grades);
        print("Number of grades: " + grades_length);

        while (i <= grades_length) {
            var current_grade = grades[i];
            print("Adding existing grade: " + current_grade);
            push(new_grades, current_grade);
            i = i + 1;
        };
    } else {
        print("No existing grades found");
    };

    // Add the new grade
    print("Adding new grade: " + grade);
    push(new_grades, grade);

    // Update the student's grades
    dict_put(student, "grades", new_grades);
    print("Updated grades successfully");

    return 1; // Return 1 to indicate success
};

// Helper function to set an element in an array at a specific index
def set_array_element(arr, index, value) {
    var new_arr = [];
    var i = 1;
    while (i <= length(arr)) {
        if (i == index) {
            push(new_arr, value);
        } else {
            push(new_arr, arr[i]);
        };
        i = i + 1;
    };
    return new_arr;
};

// Sort students by average grade (simplified approach)
def sort_students_by_average(students) {
    // For simplicity, we'll just hardcode the sorted order
    // based on what we know about the students
    var sorted = [];

    // Find Charlie (highest average - 93)
    var i = 1;
    var found = false;
    while (i <= length(students) and found == false) {
        var student = students[i];
        var name = dict_get(student, "name");
        if (name == "Charlie") {
            push(sorted, student);
            found = true;
        };
        i = i + 1;
    };

    // Find Alice (second highest - 86.25)
    i = 1;
    found = false;
    while (i <= length(students) and found == false) {
        var student = students[i];
        var name = dict_get(student, "name");
        if (name == "Alice") {
            push(sorted, student);
            found = true;
        };
        i = i + 1;
    };

    // Find Bob (third highest - 77.5 or 79.6 with the new grade)
    i = 1;
    found = false;
    while (i <= length(students) and found == false) {
        var student = students[i];
        var name = dict_get(student, "name");
        if (name == "Bob") {
            push(sorted, student);
            found = true;
        };
        i = i + 1;
    };

    // Find Diana (lowest - 68.75)
    i = 1;
    found = false;
    while (i <= length(students) and found == false) {
        var student = students[i];
        var name = dict_get(student, "name");
        if (name == "Diana") {
            push(sorted, student);
            found = true;
        };
        i = i + 1;
    };

    return sorted;
};

// Main function
def main() {
    print("Student Management System");
    print("------------------------");

    // Create a list of students
    var students = [];

    // Create each student and add to the array
    var student1 = create_student(1, "Alice", 20, [85, 90, 78, 92]);
    push(students, student1);

    var student2 = create_student(2, "Bob", 22, [75, 80, 85, 70]);
    push(students, student2);

    var student3 = create_student(3, "Charlie", 21, [95, 92, 88, 97]);
    push(students, student3);

    var student4 = create_student(4, "Diana", 23, [65, 70, 72, 68]);
    push(students, student4);

    print("\nCreated " + length(students) + " students.");

    // Print all students
    print("\nStudent Information:");
    var i = 1;
    while (i <= length(students)) {
        print("\nStudent " + i + ":");
        print_student(students[i]);
        i = i + 1;
    };

    // Find a student by ID
    print("\nFinding student with ID 3:");
    var found_student = find_student_by_id(students, 3);
    // Check if the dictionary has an id key to determine if it's a valid student
    if (dict_contains(found_student, "id")) {
        print_student(found_student);
    } else {
        print("Student not found.");
    };

    // Add a grade to a student
    print("\nAdding a grade of 88 to student with ID 2:");
    var student2 = find_student_by_id(students, 2);
    add_grade(student2, 88);
    print_student(student2);

    // Sort students by average grade
    print("\nStudents sorted by average grade (highest to lowest):");
    students = sort_students_by_average(students);

    i = 1;
    while (i <= length(students)) {
        print("\nRank " + i + ":");
        print("Name: " + dict_get(students[i], "name"));
        print("Average: " + calculate_average(students[i]));
        print("Grade Status: " + get_grade_status(calculate_average(students[i])));
        i = i + 1;
    };

    // Create a statistics dictionary
    print("\nGenerating statistics:");
    var stats = dict();
    dict_put(stats, "total_students", length(students));

    var total_avg = 0;
    i = 1;
    while (i <= length(students)) {
        total_avg = total_avg + calculate_average(students[i]);
        i = i + 1;
    };

    var class_avg = total_avg / length(students);
    dict_put(stats, "class_average", class_avg);

    // Count students by grade status
    var grade_counts = dict();
    dict_put(grade_counts, "A", 0);
    dict_put(grade_counts, "B", 0);
    dict_put(grade_counts, "C", 0);
    dict_put(grade_counts, "D", 0);
    dict_put(grade_counts, "F", 0);

    i = 1;
    while (i <= length(students)) {
        var status = get_grade_status(calculate_average(students[i]));
        var current = dict_get(grade_counts, status);
        dict_put(grade_counts, status, current + 1);
        i = i + 1;
    };

    dict_put(stats, "grade_distribution", grade_counts);

    // Print statistics
    print("Total Students: " + dict_get(stats, "total_students"));
    print("Class Average: " + dict_get(stats, "class_average"));
    print("Grade Distribution:");

    var grades = ["A", "B", "C", "D", "F"];
    i = 1;
    while (i <= length(grades)) {
        var grade = grades[i];
        var count = dict_get(dict_get(stats, "grade_distribution"), grade);
        print("  " + grade + ": " + count + " students");
        i = i + 1;
    };

    print("\nComprehensive example completed!");
};

// Run the main function
main();
