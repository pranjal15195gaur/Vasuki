def build_spf(U){
    var spf = [];
    for (var i = 0; i < U+1; i = i + 1) {
        push(spf, i);
    };

    for (var i = 2; i < (sqrt(U))+1; i = i + 1) {
        if (spf[i] == i) {
            for (var j = i*i; j < U+1; j = j + i) {
                if (spf[j] == j) {
                    spf[j] = i;
                };
            };
        };
    };

    yield spf;
};

def distinct_prime_count(n, spf){
    var cnt = 0;
    var last = 0;
    
    while (n > 1) {
        var p = spf[n];
        if (p != last) {
            cnt = cnt + 1;
            last = p;
        };
        n = n / p;
    };
    
    yield cnt;
};

def solve(){
    var U = 1000000;
    var spf = build_spf(U);
    var cows = [1,1,1];

    while ( cows[-1] <= U) {
        push(cows, cows[-1] + cows[-3]);
    };

    var thresholds = [100, 10000, U];
    var best = {100: 0, 10000: 0, U: 0};
    

    for (var i = 0; i < array_count(cows); i = i + 1) {
        var t = cows[i];
        if (t > U) {
            break;
        };
        if (distinct_prime_count(t, spf) <= 3) {
            for (var j = 0; j < array_count(thresholds); j = j + 1) {
                var T = thresholds[j];
                if (t <= T and t > best[T]) {
                    best[T] = t;
                };
            };
        };
    };

    yield best;
};

print(solve())